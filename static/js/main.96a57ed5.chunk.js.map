{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","name","email","id","className","src","alt","CardList","monsters","map","key","SearchBox","handleChange","placeholder","type","onChange","App","useState","monsterState","setMonsterState","useEffect","a","fetch","data","json","dataFormatted","fetchData","e","value","target","filteredMonsters","filter","toLowerCase","includes","searchField","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAGaA,G,MAAO,SAAC,GAAD,QAAGC,QAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,GAA3B,OAClB,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAA1B,0BACHG,IAAI,aAEN,4BAAKL,GACL,2BAAIC,MCNKK,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAACT,EAASU,GAAV,OACZ,kBAAC,EAAD,CAAMV,QAASA,EAASU,IAAKA,UCJtBC,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACxC,OACE,2BACEC,KAAK,SACLD,YAAaA,EACbE,SAAUH,EACVR,UAAU,a,MCuCDY,MA3Cf,WAAgB,IAAD,EAC2BC,mBAAS,CAC/CT,SAAU,KAFC,mBACNU,EADM,KACQC,EADR,KA4Bb,OAvBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACqBC,MAAM,8CAD3B,cACQC,EADR,gBAE8BA,EAAKC,OAFnC,OAEQC,EAFR,OAGEN,EAAgB,CAAEX,SAAUiB,IAH9B,4CADc,uBAAC,WAAD,wBAMdC,KACC,IAiBD,yBAAKtB,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWQ,aAjBM,SAACe,GAAO,IACnBC,EAAUD,EAAEE,OAAZD,MAEFE,EAAmBZ,EAAaV,SAASuB,QAAO,SAAC/B,GAAD,OACpDA,EAAQC,KAAK+B,cAAcC,SAASL,EAAMI,kBAG5Cb,EAAgB,eACXD,EADU,CAEbgB,YAAaN,EACbE,iBAAkBA,MAOqBjB,YAAY,mBACnD,kBAAC,EAAD,CACEL,SACEU,EAAaY,iBACTZ,EAAaY,iBACbZ,EAAaV,aC7BP2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96a57ed5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = ({ monster: { name, email, id } }) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n      alt=\"monsters\"\r\n    />\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = ({ monsters }) => (\r\n  <div className=\"card-list\">\r\n    {monsters.map((monster, key) => (\r\n      <Card monster={monster} key={key} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ handleChange, placeholder }) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n      className=\"search\"\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nfunction App() {\n  const [monsterState, setMonsterState] = useState({\n    monsters: []\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const dataFormatted = await data.json();\n      setMonsterState({ monsters: dataFormatted });\n    }\n    fetchData();\n  }, []);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    const filteredMonsters = monsterState.monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(value.toLowerCase())\n    );\n\n    setMonsterState({\n      ...monsterState,\n      searchField: value,\n      filteredMonsters: filteredMonsters\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox handleChange={handleChange} placeholder=\"search monster\" />\n      <CardList\n        monsters={\n          monsterState.filteredMonsters\n            ? monsterState.filteredMonsters\n            : monsterState.monsters\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}